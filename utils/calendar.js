var t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
    return typeof t;
} : function(t) {
    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
};

!function(e, r) {
    "object" === ("undefined" == typeof exports ? "undefined" : t(exports)) && "undefined" != typeof module ? module.exports = r() : "function" == typeof define && define.amd ? define(r) : e.calendar = r();
}(void 0, function() {
    var t = {
        lunarInfo: [ 19416, 19168, 42352, 21717, 53856, 55632, 91476, 22176, 39632, 21970, 19168, 42422, 42192, 53840, 119381, 46400, 54944, 44450, 38320, 84343, 18800, 42160, 46261, 27216, 27968, 109396, 11104, 38256, 21234, 18800, 25958, 54432, 59984, 28309, 23248, 11104, 100067, 37600, 116951, 51536, 54432, 120998, 46416, 22176, 107956, 9680, 37584, 53938, 43344, 46423, 27808, 46416, 86869, 19872, 42416, 83315, 21168, 43432, 59728, 27296, 44710, 43856, 19296, 43748, 42352, 21088, 62051, 55632, 23383, 22176, 38608, 19925, 19152, 42192, 54484, 53840, 54616, 46400, 46752, 103846, 38320, 18864, 43380, 42160, 45690, 27216, 27968, 44870, 43872, 38256, 19189, 18800, 25776, 29859, 59984, 27480, 21952, 43872, 38613, 37600, 51552, 55636, 54432, 55888, 30034, 22176, 43959, 9680, 37584, 51893, 43344, 46240, 47780, 44368, 21977, 19360, 42416, 86390, 21168, 43312, 31060, 27296, 44368, 23378, 19296, 42726, 42208, 53856, 60005, 54576, 23200, 30371, 38608, 19195, 19152, 42192, 118966, 53840, 54560, 56645, 46496, 22224, 21938, 18864, 42359, 42160, 43600, 111189, 27936, 44448, 84835, 37744, 18936, 18800, 25776, 92326, 59984, 27424, 108228, 43744, 41696, 53987, 51552, 54615, 54432, 55888, 23893, 22176, 42704, 21972, 21200, 43448, 43344, 46240, 46758, 44368, 21920, 43940, 42416, 21168, 45683, 26928, 29495, 27296, 44368, 84821, 19296, 42352, 21732, 53600, 59752, 54560, 55968, 92838, 22224, 19168, 43476, 41680, 53584, 62034, 54560 ],
        solarMonth: [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
        Gan: [ "甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸" ],
        Zhi: [ "子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥" ],
        Animals: [ "鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪" ],
        solarTerm: [ "小寒", "大寒", "立春", "雨水", "惊蛰", "春分", "清明", "谷雨", "立夏", "小满", "芒种", "夏至", "小暑", "大暑", "立秋", "处暑", "白露", "秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至" ],
        nStr1: [ "日", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十" ],
        nStr2: [ "初", "十", "廿", "卅" ],
        nStr3: [ "正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "冬", "腊" ],
        lYearDays: function(e) {
            var r, a = 348;
            for (r = 32768; r > 8; r >>= 1) a += t.lunarInfo[e - 1900] & r ? 1 : 0;
            return a + t.leapDays(e);
        },
        leapMonth: function(e) {
            return 15 & t.lunarInfo[e - 1900];
        },
        leapDays: function(e) {
            return t.leapMonth(e) ? 65536 & t.lunarInfo[e - 1900] ? 30 : 29 : 0;
        },
        monthDays: function(e, r) {
            return r > 12 || r < 1 ? -1 : t.lunarInfo[e - 1900] & 65536 >> r ? 30 : 29;
        },
        solarDays: function(e, r) {
            if (r > 12 || r < 0) return -1;
            var a = r;
            return 1 == a ? e % 4 == 0 && e % 100 != 0 || e % 400 == 0 ? 29 : 28 : t.solarMonth[a];
        },
        toGanZhiYear: function(e, r, a) {
            var n = "";
            n = r < 2 ? t.cyclical(e - 1900 + 36 - 1) : t.cyclical(e - 1900 + 36);
            var o = t.getTerm(e, 3);
            return 1 === r && a >= o && (n = t.cyclical(e - 1900 + 36)), n;
        },
        cyclical: function(e) {
            return t.Gan[e % 10] + t.Zhi[e % 12];
        },
        toAstro: function(t, e) {
            var r = [ 20, 19, 21, 20, 21, 22, 23, 23, 23, 24, 23, 22 ];
            return "摩羯水瓶双鱼白羊金牛双子巨蟹狮子处女天秤天蝎射手摩羯".substr(2 * t - (e < r[t - 1] ? 2 : 0), 2) + "座";
        },
        toGanZhi: function(e) {
            return t.Gan[e % 10] + t.Zhi[e % 12];
        },
        getTerm: function(e, r) {
            var a = t.getOffsetByTerm(e, r - 1);
            return t.getDateObjByOffset(e, a).getDate();
        },
        toChinaMonth: function(e) {
            if (e > 12 || e < 1) return -1;
            var r = t.nStr3[e - 1];
            return r += "月";
        },
        toChinaDay: function(e) {
            var r;
            switch (e) {
              case 10:
                r = "初十";
                break;

              case 20:
                r = "二十";
                break;

              case 30:
                r = "三十";
                break;

              default:
                r = t.nStr2[Math.floor(e / 10)], r += t.nStr1[e % 10];
            }
            return r;
        },
        getAnimal: function(e, r, a) {
            r--;
            var n = (e - 1900) % 12;
            return 0 !== n && t.getLichunOffset(e, r, a) < 0 && (n -= 1), t.Animals[n];
        },
        getLichunOffset: function(t, e, a) {
            var n = new Date(t, 0, 1);
            return n.setDate(n.getDate() + r[24 * (t - 1900) + 2]), new Date(t, e, a) - n;
        },
        getYearWeek: function(e, r, a) {
            var n = new Date(e, r, a), o = new Date(e, 0, 1), s = t.dayOfYear(n), u = Math.ceil((s + (o.getDay() + 1 - 1)) / 7);
            if (u > 1 && 11 === r) {
                var f = new Date(e + 1, 0, 1), i = f.getDay();
                i > 0 && t.getIntervalDays(n, f) <= i && (u = 1);
            }
            return u;
        },
        isEaster: function(t, e, r) {
            var a = Math.floor(t / 100), n = t - 19 * Math.floor(t / 19), o = Math.floor((a - 17) / 25), s = a - Math.floor(a / 4) - Math.floor((a - o) / 3) + 19 * n + 15;
            s -= 30 * Math.floor(s / 30), s -= Math.floor(s / 28) * (1 - Math.floor(s / 28) * Math.floor(29 / (s + 1)) * Math.floor((21 - n) / 11));
            var u = t + Math.floor(t / 4) + s + 2 - a + Math.floor(a / 4), f = s - (u -= 7 * Math.floor(u / 7)), i = 3 + Math.floor((f + 40) / 44), c = f + 28 - 31 * Math.floor(i / 4);
            return e === i && r === c;
        },
        solar2lunar: function(e, r, a) {
            if (e < 1900 || e > 2100) return -1;
            if (1900 == e && 0 == r && a < 31) return -1;
            var n, o = new Date(), s = 0, u = 0;
            e = (o = e ? new Date(e, parseInt(r), a) : new Date()).getFullYear(), r = o.getMonth(), 
            a = o.getDate(), r++;
            var f = (Date.UTC(o.getFullYear(), o.getMonth(), o.getDate()) - Date.UTC(1900, 0, 31)) / 864e5;
            for (n = 1900; n < 2101 && f > 0; n++) f -= u = t.lYearDays(n);
            f < 0 && (f += u, n--);
            var i = new Date(), c = !1;
            i.getFullYear() == e && i.getMonth() + 1 == r && i.getDate() == a && (c = !0);
            var h = o.getDay(), l = t.nStr1[h], g = n;
            s = t.leapMonth(n);
            var D = !1;
            for (n = 1; n < 13 && f > 0; n++) s > 0 && n == s + 1 && 0 == D ? (--n, D = !0, 
            u = t.leapDays(g)) : u = t.monthDays(g, n), 1 == D && n == s + 1 && (D = !1), f -= u;
            0 == f && s > 0 && n == s + 1 && (D ? D = !1 : (D = !0, --n)), f < 0 && (f += u, 
            --n);
            var y = n, m = f + 1, S = r - 1, M = t.toGanZhiYear(e, r - 1, a), v = t.getTerm(e, 2 * r - 1), T = t.getTerm(e, 2 * r), p = t.toGanZhi(12 * (e - 1900) + r + 11);
            a >= v && (p = t.toGanZhi(12 * (e - 1900) + r + 12));
            var B = !1, d = null;
            v === a && (B = !0, d = t.solarTerm[2 * r - 2]), T === a && (B = !0, d = t.solarTerm[2 * r - 1]);
            var O = Date.UTC(e, S, 1, 0, 0, 0, 0) / 864e5 + 25567 + 10, A = t.toGanZhi(O + a - 1), b = t.toAstro(r, a);
            return {
                lYear: g,
                lMonth: y,
                lDay: m,
                Animal: t.getAnimal(e, r, a),
                IMonthCn: (D ? "闰" : "") + t.toChinaMonth(y),
                IDayCn: t.toChinaDay(m),
                cYear: e,
                cMonth: r,
                cDay: a,
                gzYear: M,
                gzMonth: p,
                gzDay: A,
                isToday: c,
                isLeap: D,
                nWeek: h,
                ncWeek: "星期" + l,
                isTerm: B,
                Term: d,
                astro: b
            };
        },
        lunar2solar: function(e, r, a, n) {
            n = !!n;
            var o = t.leapMonth(e);
            if (n && o != r) return -1;
            if (2100 == e && 12 == r && a > 1 || 1900 == e && 1 == r && a < 31) return -1;
            var s = t.monthDays(e, r), u = s;
            if (n && (u = t.leapDays(e, r)), e < 1900 || e > 2100 || a > u) return -1;
            for (var f = 0, i = 1900; i < e; i++) f += t.lYearDays(i);
            var c = 0, h = !1;
            for (i = 1; i < r; i++) c = t.leapMonth(e), h || c <= i && c > 0 && (f += t.leapDays(e), 
            h = !0), f += t.monthDays(e, i);
            n && (f += s);
            var l = Date.UTC(1900, 1, 30, 0, 0, 0), g = new Date(864e5 * (f + a - 31) + l), D = g.getUTCFullYear(), y = g.getUTCMonth(), m = g.getUTCDate();
            return t.solar2lunar(D, y, m);
        },
        BASE_STEMS_DATE: new Date(1899, 1, 4, 0, 0),
        BASE_STEMS_YEAR: 1899,
        JXNames: [ "吉", "凶" ],
        JXStatusUnknown: -1,
        JXStatusJi: 0,
        JXStatusXiong: 1,
        JXTable: [ 3372, 843, 3282, 2868, 717, 1203, 3372, 843, 3282, 2868, 733, 1187, 3372, 843, 3282, 2868, 709, 1202, 3372, 843, 3282, 2868, 717, 1203, 3372, 842, 3282, 2868, 717, 1203, 3372, 843, 3282, 2868, 717, 1203, 3372, 843, 3282, 2852, 717, 1187, 3368, 843, 3282, 2868, 717, 1187, 3372, 843, 3282, 2868, 717, 1203, 3372, 843, 3314, 2868, 717, 1203 ],
        mPzStemArray: [ "甲不开仓财物耗散", "乙不栽植千株不长", "丙不修灶必见灾殃", "丁不剃头头必生疮", "戊不受田田主不祥", "己不破券二比并亡", "庚不经络织机虚张", "辛不合酱主人不尝", "壬不汲水更难提防", "癸不词讼理弱敌强" ],
        mPzBranchArray: [ "子不问卜自惹祸殃", "丑不冠带主不还乡", "寅不祭祀神鬼不尝", "卯不穿井水泉不香", "辰不哭泣必主重丧", "巳不远行财物伏藏", "午不苫盖屋主更张", "未不服药毒气入肠", "申不安床鬼祟入房", "酉不宴客醉坐颠狂", "戌不吃犬作怪上床", "亥不嫁娶不利新郎" ],
        CompassUnknown: -1,
        CompassNorth: 0,
        CompassNortheast: 1,
        CompassEast: 2,
        CompassSoutheast: 3,
        CompassSouth: 4,
        CompassSouthwest: 5,
        CompassWest: 6,
        CompassNorthwest: 7,
        CompassNames: [ "正北", "东北", "正东", "东南", "正南", "西南", "正西", "西北" ],
        ANIMAL: [ "鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪" ],
        mWxMap: {
            "甲子": "海中金",
            "乙丑": "海中金",
            "丙寅": "炉中火",
            "丁卯": "炉中火",
            "戊辰": "大林木",
            "己巳": "大林木",
            "庚午": "路旁土",
            "辛未": "路旁土",
            "壬申": "剑锋金",
            "癸酉": "剑锋金",
            "甲戌": "山头火",
            "乙亥": "山头火",
            "丙子": "涧下水",
            "丁丑": "涧下水",
            "戊寅": "城头土",
            "己卯": "城头土",
            "庚辰": "白腊金",
            "辛巳": "白腊金",
            "壬午": "杨柳木",
            "癸未": "杨柳木",
            "甲申": "泉中水",
            "乙酉": "泉中水",
            "丙戌": "屋上土",
            "丁亥": "屋上土",
            "戊子": "霹雳火",
            "己丑": "霹雳火",
            "庚寅": "松柏木",
            "辛卯": "松柏木",
            "壬辰": "长流水",
            "癸巳": "长流水",
            "甲午": "沙中金",
            "乙未": "沙中金",
            "丙申": "山下火",
            "丁酉": "山下火",
            "戊戌": "平地木",
            "己亥": "平地木",
            "庚子": "壁上土",
            "辛丑": "壁上土",
            "壬寅": "金箔金",
            "癸卯": "金箔金",
            "甲辰": "覆灯火",
            "乙巳": "覆灯火",
            "丙午": "天河水",
            "丁未": "天河水",
            "戊申": "大驿土",
            "己酉": "大驿土",
            "庚戌": "钗钏金",
            "辛亥": "钗钏金",
            "壬子": "桑拓木",
            "癸丑": "桑拓木",
            "甲寅": "大溪水",
            "乙卯": "大溪水",
            "丙辰": "沙中土",
            "丁巳": "沙中土",
            "戊午": "天上火",
            "己未": "天上火",
            "庚申": "石榴木",
            "辛酉": "石榴木",
            "壬戌": "大海水",
            "癸亥": "大海水"
        },
        querySAByDay: function(e, r, a) {
            var n = {}, o = t.getStemsBranchDay(e), s = t.getStemsBranchMonth(e.getFullYear(), t.dayOfYear(e) - 1), u = t.getStemsBranchDayAsString(e), f = o % 10, i = o % 12, c = t.mPzStemArray[f] + " " + t.mPzBranchArray[i];
            n.pzbj = c;
            var h = "", l = "", g = (s + 10) % 12 + 1;
            r[g + "-" + u] && (h = r[g + "-" + u].JSYQ, l = r[g + "-" + u].XSYJ, n.jsyq = h, 
            n.xsyj = l);
            var D = "";
            t.mWxMap[u] && (D = t.mWxMap[u], n.wx = D);
            var y = t.cxInfoOfDateTime(e, -2);
            n.cs = y;
            var m = t.zhiShenOfMonth(s % 12, o % 12);
            n.zhishen = m;
            var S = t.jianChuOfDate(e);
            n.jianchu = S;
            var M = t.stars28OfDate(e);
            n.stars28 = M;
            var v = t.getStemsBranchMonthAsString(e.getFullYear(), t.dayOfYear(e) - 1), T = t.getStemsBranchDayAsString(e), p = t.taiShenOfMonthDiZhi(v, T, a);
            return n.taishen = p, n;
        },
        getStemsBranchDayAsString: function(e) {
            return t.formatStemsBranchString(t.getStemsBranchDay(e));
        },
        jianChuOfDate: function(e) {
            var r = new Date(1901, 0, 1), a = new Date(e.getFullYear(), e.getMonth(), e.getDate()), n = t.twentyFourTermdaysOf(a), o = -1;
            if (2 == n.length) {
                var s = parseInt(n[0]), u = parseInt(n[n.length - 1]), f = s % 2 == 0 ? s / 2 : s / 2 + 1;
                u && s % 2 == 0 && (f += 1);
                var i = Math.abs((a.getTime() - r.getTime()) / 1e3) / 86400;
                o = Math.ceil((5 + i - f) % 12);
            }
            return [ "建日", "除日", "满日", "平日", "定日", "执日", "破日", "危日", "成日", "收日", "开日", "闭日" ][o >= 2 ? o - 2 : o + 10];
        },
        stars28OfDate: function(e) {
            for (var r = 365 * (e.getFullYear() - 1), a = 0; a < e.getMonth(); a++) r += t.dayCountOfMonth(a, 0);
            r += e.getDate();
            var n = 0;
            return t.isLeapYear(e.getFullYear()) && (e.getMonth() + 1 > 3 || e.getMonth() + 1 == 3 && e.getDate() >= 1) && (n = 1), 
            [ "轸水蚓宿星", "角木蛟宿星", "亢金龙宿星", "氐土貉宿星", "房日兔宿星", "心月狐宿星", "尾火虎宿星", "箕水豹宿星", "斗木獬宿星", "牛金牛宿星", "女土蝠宿星", "虚日鼠宿星", "危月燕宿星", "室火猪宿星", "璧水貐宿星", "奎木狼宿星", "娄金狗宿星", "胃土雉宿星", "昴日鸡宿星", "毕月乌宿星", "觜火猴宿星", "参水猿宿星", "井木犴宿星", "鬼金羊宿星", "柳土獐宿星", "星日马宿星", "张月鹿宿星", "翼火蛇宿星" ][(r + Math.floor((e.getFullYear() - 1) / 4 - 13 + n) + 23) % 28];
        },
        isLeapYear: function(t) {
            return t % 4 == 0 && t % 100 != 0 || t % 400 == 0;
        },
        dayCountOfMonth: function(t, e) {
            switch (t + 1) {
              case 1:
                return 31;

              case 2:
                return e ? 29 : 28;

              case 3:
                return 31;

              case 4:
                return 30;

              case 5:
                return 31;

              case 6:
                return 30;

              case 7:
              case 8:
                return 31;

              case 9:
                return 30;

              case 10:
                return 31;

              case 11:
                return 30;

              case 12:
                return 31;
            }
            return 0;
        },
        taiShenOfMonthDiZhi: function(e, r, a) {
            var n = t.codeForMonthDizhi(e);
            return t.taiShenWithCode(n, r, a);
        },
        codeForMonthDizhi: function(t) {
            return {
                "子": 11,
                "丑": 12,
                "寅": 1,
                "卯": 2,
                "辰": 3,
                "巳": 4,
                "午": 5,
                "未": 6,
                "申": 7,
                "酉": 8,
                "戌": 9,
                "亥": 10
            }[t];
        },
        taiShenWithCode: function(t, e, r) {
            var a = r[t + "-" + e];
            return a || "暂无";
        },
        getStemsBranchMonthAsString: function(e, r) {
            return t.formatBranchMonthString(t.getStemsBranchMonth(e, r));
        },
        formatBranchMonthString: function(e) {
            return e < 0 ? "" : t.Zhi[e % 12];
        },
        cxInfoOfDateTime: function(e, r) {
            var a = t.branchIndexOfSolar(e, r), n = t.chongIndexOfDateTime(a), o = t.shaDirectionOfDateTime(a);
            try {
                return "冲" + t.ANIMAL[n] + "煞" + t.CompassNames[o].replace("正", "");
            } catch (t) {
                return "";
            }
        },
        branchIndexOfSolar: function(e, r) {
            return -2 == r ? t.getBranchDay(e) : t.getStemBranchHour(e, r) % 12;
        },
        getBranchDay: function(e) {
            var r = t.getIntervalDays(t.BASE_STEMS_DATE, e);
            return r > 0 ? Math.floor((r + 3) % 12) : 0;
        },
        chongIndexOfDateTime: function(t) {
            var e = -1;
            switch (t) {
              case 0:
                e = 6;
                break;

              case 1:
                e = 7;
                break;

              case 2:
                e = 8;
                break;

              case 3:
                e = 9;
                break;

              case 4:
                e = 10;
                break;

              case 5:
                e = 11;
                break;

              case 6:
                e = 0;
                break;

              case 7:
                e = 1;
                break;

              case 8:
                e = 2;
                break;

              case 9:
                e = 3;
                break;

              case 10:
                e = 4;
                break;

              case 11:
                e = 5;
            }
            return e;
        },
        shaDirectionOfDateTime: function(e) {
            var r = t.CompassUnknown;
            switch (e) {
              case 0:
              case 4:
              case 8:
                r = t.CompassSouth;
                break;

              case 1:
              case 5:
              case 9:
                r = t.CompassEast;
                break;

              case 2:
              case 6:
              case 10:
                r = t.CompassNorth;
                break;

              case 3:
              case 7:
              case 11:
                r = t.CompassWest;
            }
            return r;
        },
        getStemsBranchHourAsString: function(e, r) {
            var a = t.getLunarHourIndex(r);
            return t.formatStemsBranchString(t.getStemBranchHour(e, a));
        },
        getLunarHourIndex: function(t) {
            return (Math.floor(t / 2) + t % 2) % 12;
        },
        getStemBranchHour: function(e, r) {
            var a = t.getIntervalDays(t.BASE_STEMS_DATE, e), n = parseInt((a + 9) % 10), o = r;
            return (6 * ((o + 2 * (n > 4 ? n - 5 : n)) % 10) - 5 * o + 60) % 60;
        },
        formatStemsBranchString: function(e) {
            return e < 0 ? "" : t.Gan[e % 10] + t.Zhi[e % 12];
        },
        getIntervalDays: function(t, e) {
            return e.setHours(0), e.setMinutes(0), e.setSeconds(0), e.setMilliseconds(0), Math.floor((e - t) / 864e5);
        },
        getYJSqlFields: function(e) {
            var r = [ "-1", "-1" ], a = t.twentyFourTermdaysOf(e);
            if (2 == a.length) {
                var n = a[0], o = a[1], s = Math.floor(n % 2 == 0 ? n / 2 : n / 2 + 1);
                o > 0 && n % 2 == 0 && (s += 1);
                var u = new Date(1901, 0, 1), f = Math.abs(t.getIntervalDays(u, e));
                r[0] = (15 + f) % 60 + "", r[1] = Math.floor(Math.abs((5 + f - s) % 12)) + "";
            }
            return r;
        },
        twentyFourTermdaysOf: function(e) {
            try {
                for (var a = e.getFullYear() - 1900, n = t.dayOfYear(e) - 1, o = 0, s = 0, u = 0; u < 24; u++) {
                    var f = r[24 * a + u];
                    if (f > n) {
                        o = u, s = 0;
                        break;
                    }
                    if (f == n) {
                        o = u, s = 1;
                        break;
                    }
                }
                return [ o + 24 * a - 24, s ];
            } catch (t) {
                return null;
            }
        },
        dayOfYear: function(t) {
            for (var e = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31), r = t.getDate(), a = t.getMonth(), n = t.getFullYear(), o = 0, s = 0; s < a; s++) o += e[s];
            return o += r, (a > 1 && n % 4 == 0 && n % 100 != 0 || n % 400 == 0) && (o += 1), 
            o;
        },
        jixiongStatusOfDateTime: function(e, r) {
            var a = t.JXStatusUnknown, n = t.getStemsBranchDay(e);
            return n > -1 && n < 60 && (a = (t.JXTable[n] >> 11 - t.getLunarHourIndex(r) & 1) > 0 ? t.JXStatusJi : t.JXStatusXiong), 
            t.getJXName(a);
        },
        getStemsBranchDay: function(e) {
            var r = t.getIntervalDays(t.BASE_STEMS_DATE, e);
            return r > 0 ? (6 * parseInt((r + 9) % 10) - 5 * parseInt((r + 3) % 12) + 60) % 60 : -1;
        },
        getJXName: function(e) {
            return e < 0 || e > t.JXNames.length ? "" : t.JXNames[e];
        },
        zhiShenOfMonth: function(t, e) {
            var r = t, a = 0;
            0 == r || 6 == r ? a = 8 : 1 == r || 7 == r ? a = 10 : 2 == r || 8 == r ? a = 0 : 3 == r || 9 == r ? a = 2 : 4 == r || 10 == r ? a = 4 : 5 != r && 11 != r || (a = 6);
            var n = e - a;
            return n < 0 && (n += 12), [ "青龙", "明堂", "天刑", "朱雀", "金匮", "天德", "白虎", "玉堂", "天牢", "玄武", "司命", "勾陈" ][n];
        },
        getStemsBranchMonth: function(e, r) {
            var a = t.findPreTerm(e, r), n = Math.floor(12 * (e - t.BASE_STEMS_YEAR) + (a + 2) / 2 - 2);
            return (6 * ((n + 2) % 10) - 5 * ((n + 2) % 12) + 60) % 60;
        },
        MIN: 1900,
        MAX: 2135,
        findPreTerm: function(e, a) {
            var n = e - t.MIN;
            if (n > 0 && n < r.length / 24) {
                var o = 24 * n;
                return t.findPreTerm1(r, a, o);
            }
            return -1;
        },
        findPreTerm1: function(t, e, r) {
            for (var a = new Array(24), n = r; n <= r + 23; n++) a[n - r] = t[n];
            var o = -1, s = 0;
            for (s = 0; s < a.length; s++) {
                if (e === a[s]) {
                    o = s;
                    break;
                }
                if (e < a[s]) {
                    o = s - 1;
                    break;
                }
            }
            return s === a.length && -1 === o && (o = s - 1), o;
        },
        getDogDayInfo: function(e) {
            var r = t.getDogDaysBeginDates(e.getFullYear());
            if (null == r || r.length < 3) return "";
            var a = t.getIntervalDays(r[0], e), n = t.getIntervalDays(r[1], e), o = t.getIntervalDays(r[2], e);
            return a >= 0 && n < 0 ? "初伏第" + (a + 1) + "天" : n >= 0 && o < 0 ? "中伏第" + (n + 1) + "天" : o >= 0 && o < 10 ? "末伏第" + (o + 1) + "天" : "";
        },
        getDogDaysBeginDates: function(r) {
            var a = t.getOffsetByTerm(r, e.TERMS_XZ);
            if (a < 0) return null;
            var n = new Array(3), o = t.getDateObjByOffset(r, a), s = t.getStemsDay(o);
            return n[0] = t.getNextDay(o, 20 + (s > 6 ? 16 - s : 6 - s)), n[1] = t.getNextDay(n[0], 10), 
            (a = t.getOffsetByTerm(r, e.TERMS_LQ)) < 0 ? null : (o = t.getDateObjByOffset(r, a), 
            s = t.getStemsDay(o), n[2] = t.getNextDay(o, s > 6 ? 16 - s : 6 - s), n);
        },
        getOffsetByTerm: function(t, e) {
            return e < 0 ? -1 : r[24 * (t - 1900) + e];
        },
        getStemsDay: function(e) {
            var r = t.getIntervalDays(t.BASE_STEMS_DATE, e);
            return r > 0 ? Math.floor((r + 9) % 10) : 0;
        },
        getDateObjByOffset: function(t, e) {
            var r = new Date(t, 0, 1, 0, 0, 0, 0);
            return r.setDate(r.getDate() + e), r;
        },
        getNextDay: function(t, e) {
            var r = new Date(t.getFullYear(), t.getMonth(), t.getDate());
            return r.setDate(r.getDate() + e), r;
        },
        MIN_YEAR: 1900,
        MAX_YEAR: 2135,
        CHINESE_NUM: [ "零", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十" ],
        getColdInfo: function(e) {
            var r = t.getIntervalDays(t.getColdBeginDate(e), e);
            if (r >= 0) {
                var a = Math.floor(r / 9), n = Math.floor(r % 9 + 1);
                if (a >= 0 && a < 9) return t.CHINESE_NUM[a + 1] + "九第" + n + "天";
            }
            return "";
        },
        getColdBeginDate: function(r) {
            var a = r.getFullYear();
            if (a >= t.MIN_YEAR && a <= t.MAX_YEAR) {
                var n = 0;
                return t.dayOfYear(r) < 100 ? (n = t.getOffsetByTerm(a - 1, e.STEMS_DZ), t.getDateObjByOffset(a - 1, n)) : (n = t.getOffsetByTerm(a, e.STEMS_DZ), 
                t.getDateObjByOffset(a, n));
            }
            return null;
        }
    }, e = {
        TERMS_XZ: 11,
        TERMS_LQ: 14,
        STEMS_DZ: 23
    }, r = [ 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 157, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 172, 188, 204, 220, 235, 251, 266, 281, 296, 311, 326, 341, 356, 6, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 173, 188, 204, 220, 235, 251, 266, 282, 297, 312, 327, 341, 356, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 172, 188, 204, 220, 235, 251, 266, 281, 296, 311, 326, 341, 356, 6, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 173, 188, 204, 220, 235, 251, 266, 282, 297, 312, 327, 341, 356, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 172, 188, 204, 220, 235, 251, 266, 281, 296, 311, 326, 341, 356, 6, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 173, 188, 204, 220, 235, 251, 266, 282, 297, 312, 326, 341, 356, 5, 19, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 64, 80, 95, 110, 125, 141, 157, 172, 188, 204, 219, 235, 251, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 173, 188, 204, 220, 235, 251, 266, 281, 297, 312, 326, 341, 356, 5, 19, 34, 49, 64, 79, 94, 110, 125, 140, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 50, 64, 80, 95, 110, 125, 141, 157, 172, 188, 204, 219, 235, 251, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 173, 188, 204, 220, 235, 251, 266, 281, 297, 312, 326, 341, 356, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 157, 172, 188, 204, 219, 235, 251, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 173, 188, 204, 220, 235, 251, 266, 281, 297, 312, 326, 341, 356, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 157, 172, 188, 204, 219, 235, 251, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 173, 188, 204, 220, 235, 251, 266, 281, 296, 311, 326, 341, 356, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 157, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 172, 188, 204, 220, 235, 251, 266, 281, 296, 311, 326, 341, 356, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 172, 188, 204, 220, 235, 251, 266, 281, 296, 311, 326, 341, 356, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 65, 80, 95, 110, 126, 141, 157, 172, 188, 204, 220, 235, 251, 266, 281, 296, 311, 326, 341, 356, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 65, 80, 95, 110, 125, 141, 157, 172, 188, 204, 220, 235, 251, 266, 281, 296, 311, 326, 341, 356, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 64, 80, 95, 110, 125, 141, 157, 172, 188, 204, 219, 235, 251, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 5, 20, 35, 50, 64, 80, 95, 110, 125, 141, 157, 172, 188, 204, 219, 235, 251, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 50, 64, 79, 95, 110, 125, 141, 157, 172, 188, 204, 219, 235, 251, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 157, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 157, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 95, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 280, 296, 311, 326, 340, 355, 5, 19, 34, 49, 64, 79, 94, 110, 125, 140, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 204, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 63, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 235, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 4, 19, 34, 49, 63, 78, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 4, 19, 34, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 280, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 140, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 4, 19, 34, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 63, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 341, 355, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 354, 4, 19, 34, 49, 63, 78, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 4, 19, 33, 48, 63, 78, 93, 109, 124, 139, 155, 171, 187, 202, 218, 234, 249, 264, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 280, 296, 311, 326, 340, 355, 4, 19, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 187, 202, 218, 234, 249, 264, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 280, 295, 310, 325, 340, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 63, 78, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 280, 295, 310, 325, 340, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 280, 295, 310, 325, 339, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 354, 4, 19, 34, 49, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 310, 325, 340, 355, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 280, 295, 310, 325, 339, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 310, 325, 340, 355, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 280, 295, 310, 325, 339, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 280, 295, 310, 325, 339, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 139, 155, 171, 187, 202, 218, 234, 249, 264, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 279, 295, 310, 325, 339, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 139, 155, 171, 187, 202, 218, 234, 249, 264, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 279, 295, 310, 325, 339, 354, 4, 19, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 234, 249, 264, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 170, 186, 202, 218, 233, 249, 264, 279, 295, 310, 324, 339, 354, 4, 19, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 280, 295, 310, 325, 340, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 63, 78, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 3, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 170, 186, 202, 218, 233, 249, 264, 279, 295, 310, 324, 339, 354, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 280, 295, 310, 325, 340, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 3, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 170, 186, 202, 218, 233, 249, 264, 279, 295, 310, 324, 339, 354, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 280, 295, 310, 325, 339, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 354, 4, 19, 34, 49, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 3, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 170, 186, 202, 218, 233, 249, 264, 279, 294, 309, 324, 339, 354, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 280, 295, 310, 325, 339, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 3, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 170, 186, 202, 217, 233, 249, 264, 279, 294, 309, 324, 339, 354, 4, 18, 33, 48, 63, 78, 93, 108, 124, 139, 155, 171, 186, 202, 218, 233, 249, 264, 280, 295, 310, 325, 339, 354, 4, 19, 33, 48, 63, 78, 93, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 354, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 140, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 280, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 140, 156, 172, 187, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 20, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 35, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 63, 79, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 296, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 341, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 356, 4, 19, 34, 49, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 219, 234, 250, 265, 280, 295, 311, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 4, 19, 34, 49, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 141, 156, 172, 188, 203, 219, 235, 250, 266, 281, 296, 311, 326, 341, 355, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 203, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355, 5, 20, 34, 49, 64, 79, 94, 110, 125, 140, 156, 172, 188, 203, 219, 235, 250, 265, 281, 296, 311, 326, 341, 355, 4, 19, 34, 48, 63, 78, 94, 109, 124, 140, 155, 171, 187, 202, 218, 234, 249, 265, 280, 295, 310, 325, 340, 355, 4, 19, 34, 49, 64, 79, 94, 109, 124, 140, 156, 171, 187, 203, 218, 234, 250, 265, 280, 295, 310, 325, 340, 355, 5, 19, 34, 49, 64, 79, 94, 109, 125, 140, 156, 172, 187, 203, 219, 234, 250, 265, 281, 296, 311, 326, 340, 355 ];
    return t;
});